{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "tags": [
     "Data prep"
    ]
   },
   "outputs": [],
   "source": [
    "\n",
    "dftrain = pd.read_csv(\"INSERT_FILE_NAME\")\n",
    "dfeval = pd.read_csv(\"INSET_FILE_NAME\")\n",
    "\n",
    "y_train = dftrain.pop(\"LABEL\") # Removes label to allow for comparison of features to label\n",
    "y_eval = dftrain.pop(\"LABEL\") # Determines accuracy of model\n",
    "\n",
    "\n",
    "categorical_columns = [\"WHATEVER_NON_NUMERICAL_FEATURES\"]\n",
    "numeric_columns = [\"WHATEVER_NUMERICAL_FEATURES\"]\n",
    "\n",
    "feature_columns = []\n",
    "\n",
    "for feature_name in categorical_columns:\n",
    "\tunique_vocab = dftrain[feature_name].unique() # get a list of all unique values from feature column\n",
    "\tfeature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, unique_vocab))\n",
    "\t\n",
    "for feature_name in numeric_columns:\n",
    "\tfeature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))\n",
    "\t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "Training "
    ]
   },
   "outputs": [],
   "source": [
    "# Converts panda dataframe into tf.data.Dataset object (required for tensorflow to work)\t\n",
    "def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):\n",
    "  def input_function():  # inner function, this will be returned (AS AN OBJECT - WILL NOT RUN)\n",
    "    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))  # creates tf.data.Dataset object with data and its label\n",
    "    if shuffle:\n",
    "      ds = ds.shuffle(1000)  # shuffle data\n",
    "    ds = ds.batch(batch_size).repeat(num_epochs)  # split dataset into batches of 32 to feed algorithm gradually. num_epocks = how much data will be refed to increase accuracy\n",
    "    return ds  # return the batch of the dataset\n",
    "  return input_function  # return a function object for use\n",
    "# End of conversion from pd df --> tf.dataset.Dataset object\n",
    "\n",
    "\n",
    "train_input_fn = make_input_fn(dftrain, y_train)  # calls the input_function that was returned to us to get a dataset object we can feed to the model\n",
    "eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)\n",
    "\n",
    "# Creating a linear estimator (basic implementaion of algorithm in tensorflow) which will automatically use a linear regression algorithm\n",
    "linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)\n",
    "\n",
    "linear_est.train(train_input_fn)  # train our model\n",
    "result = linear_est.evaluate(eval_input_fn)  # get model accuracy stats by testing on testing data\n",
    "\n",
    "clear_output()  # clears console output as training spits output onto console\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "Optional / Results"
    ]
   },
   "outputs": [],
   "source": [
    "# NON_TRAINING / OPTIONAL:\n",
    "\n",
    "print(result[\"accuracy\"])  # result variable is a dict of stats regarding accuracy of our model\n",
    "\n",
    "#To predict specific value\n",
    "result = list(linear_est.predict(eval_input_fn)) # uses dfeval. list() as object is originally generator object\n",
    "print(result[n][\"probabilities\"][0/1]) #indexes into result which is list of dicts. 0/1 depending on if u want accuracy for no/yes.\n",
    "print(y_eval.loc[n]) # prints label of index n so u can compare predicted value/label to real value from dfeval\n",
    "print(dfeval.loc[n]) # print features of index n "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
